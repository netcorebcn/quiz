version: "3"

services:
  ui:
    image: ${REGISTRY}quiz-ui:${SHA_COMMIT}
    ports:
      - "80:5000"
    networks:
      - front-tier
    depends_on: 
      - vote
      - results
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
        
  vote:
    image: ${REGISTRY}quiz-voting:${SHA_COMMIT}
    ports:
      - "81:80"
    networks:
      - back-tier
    environment: 
      - EVENT_STORE=tcp://admin:changeit@eventstore:1113
      - EVENT_STORE_MANAGER_HOST=eventstore:2113
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
  
  results:
    image: ${REGISTRY}quiz-results:${SHA_COMMIT}
    ports:
      - "82:80"
    networks:
      - back-tier
    environment: 
      - EVENT_STORE=tcp://admin:changeit@eventstore:1113
    depends_on: 
      - setup
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
  
  eventstore:
    image: eventstore/eventstore
    ports:
      - "2113:2113"
      - "1113:1113"
    networks:
      - back-tier
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]

  setup:
    image: ${REGISTRY}quiz-setup:${SHA_COMMIT}
    networks:
      - back-tier
    environment: 
      - EVENT_STORE_MANAGER_HOST=eventstore:2113
    depends_on: 
      - eventstore
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 2
        window: 120s   

  ci:
    image: ${REGISTRY}awesome-ci:${SHA_COMMIT}
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - front-tier
    environment: 
      - CI_TOKEN=${CI_TOKEN}
      - REGISTRY=${REGISTRY}
    logging:
      driver: "json-file"
    deploy:
      placement:
        constraints: [node.role == manager]
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
  
  registry: 
    image: registry:2
    ports:
      - "5000:5000"
    deploy:
      placement:
        constraints: [node.role == manager]

  viz:
    image: manomarks/visualizer
    ports:
      - "9090:8080"
    environment: 
      - PORT=9090
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  front-tier:
  back-tier: